{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAiBC,SAASC,cAAc,SACxCC,EAAeF,SAASC,cAAc,gBAC5CF,EAAeI,iBAAiB,UAOhC,SAAsBC,GACpBA,EAAEC,iBACFH,EAAaI,UAAW,EAOxB,IALA,IAAgCC,EAAAR,EAAeS,SAAvCC,EAAwBF,EAAxBG,MAAOC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACjBC,EAAeC,OAAOL,EAAMM,OAC1BC,EAAcF,OAAOH,EAAKI,OAC1BE,EAAgBH,OAAOF,EAAOG,OAE3BG,EAAI,EAAGA,GAAKD,EAAeC,IAClCC,EAAcD,EAAGL,GACdO,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUZ,EAAKW,EAALX,MACjBb,EAAA0B,OAAOC,QAAQ,uBAAwCC,OAAfH,EAAS,QAAYG,OAANf,EAAM,M,IAE9DgB,OAAM,SAAAL,G,IAAGC,EAAQD,EAARC,SAAUZ,EAAKW,EAALX,MAClBb,EAAA0B,OAAOI,QAAQ,sBAAqCF,OAAfH,EAAS,QAAYG,OAANf,EAAM,M,IAE9DG,GAAgBG,EAGlBY,YAAW,WACT1B,EAAaI,UAAW,C,GACvBO,EA3BiB,I,IA8BtB,SAASM,EAAcG,EAAUZ,GAC/B,IAAMmB,EAAgBC,KAAKC,SAAW,GAChCC,EAAgB,CAAEV,WAAUZ,SAElC,OAAO,IAAIuB,SAAQ,SAACC,EAASC,GAC3BP,YAAW,WACLC,EACFK,EAAQF,GAERG,EAAOH,E,GAERtB,E,IAxCPb,EAAA0B,OAAOa,KAAK,CACVC,QAFoB,K","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst parametersForm = document.querySelector('.form');\nconst submitButton = document.querySelector('.form button');\nparametersForm.addEventListener('submit', onFormSubmit);\n\nconst notifyTimeout = 3000;\nNotify.init({\n  timeout: notifyTimeout,\n});\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  submitButton.disabled = true;\n\n  const { delay, step, amount } = parametersForm.elements;\n  let promiseDelay = Number(delay.value);\n  const promiseStep = Number(step.value);\n  const promiseAmount = Number(amount.value);\n\n  for (let i = 1; i <= promiseAmount; i++) {\n    createPromise(i, promiseDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    promiseDelay += promiseStep;\n  }\n\n  setTimeout(() => {\n    submitButton.disabled = false;\n  }, promiseDelay + notifyTimeout);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promiseObject = { position, delay };\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(promiseObject);\n      } else {\n        reject(promiseObject);\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$parametersForm","document","querySelector","$ce04d3a99e08e73b$var$submitButton","addEventListener","e","preventDefault","disabled","_elements","elements","delay1","delay","step","amount","promiseDelay","Number","value","promiseStep","promiseAmount","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","Notify","success","concat","catch","failure","setTimeout","shouldResolve","Math","random","promiseObject","Promise","resolve","reject","init","timeout"],"version":3,"file":"03-promises.8bd4cdb9.js.map"}